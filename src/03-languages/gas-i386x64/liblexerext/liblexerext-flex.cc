#line 2 "liblexerext-flex.cc"

#line 4 "liblexerext-flex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
             size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yyconst flex_int16_t yy_nxt[][38] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0
    },

    {
       35,   36,   37,   38,   36,   39,   36,   36,   36,   36,
       36,   36,   36,   40,   41,   36,   36,   36,   36,   36,
       42,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36
    },

    {
       35,   36,   37,   38,   36,   39,   36,   36,   36,   36,
       36,   36,   36,   40,   41,   36,   36,   36,   36,   36,

       42,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43

    },

    {
       35,   44,   44,   44,   44,   44,   45,   44,   44,   44,
       44,   44,   44,   45,   44,   44,   46,   46,   46,   44,
       44,   44,   44,   45,   45,   45,   45,   45,   45,   44,
       45,   45,   45,   45,   45,   45,   45,   45
    },

    {
       35,   44,   44,   44,   44,   44,   45,   44,   44,   44,
       44,   44,   44,   45,   44,   44,   46,   46,   46,   44,
       44,   44,   44,   45,   45,   45,   45,   45,   45,   44,
       45,   45,   45,   45,   45,   45,   45,   45
    },

    {
       35,   47,   48,   49,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   50,

       47,   51,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47
    },

    {
       35,   47,   48,   49,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   50,
       47,   51,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47
    },

    {
       35,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52

    },

    {
       35,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52
    },

    {
       35,   53,   54,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53
    },

    {
       35,   53,   54,   55,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43

    },

    {
       35,   56,   57,   58,   59,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56
    },

    {
       35,   56,   57,   58,   59,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56
    },

    {
       35,   60,   61,   62,   60,   63,   64,   65,   66,   67,
       60,   68,   69,   70,   60,   71,   72,   72,   72,   60,

       60,   60,   60,   70,   70,   70,   70,   70,   70,   60,
       70,   70,   70,   70,   70,   70,   70,   70
    },

    {
       35,   60,   61,   62,   60,   63,   64,   65,   66,   67,
       60,   68,   69,   70,   60,   71,   72,   72,   72,   60,
       60,   60,   60,   70,   70,   70,   70,   70,   70,   60,
       70,   70,   70,   70,   70,   70,   70,   70
    },

    {
       35,   73,   73,   74,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73

    },

    {
       35,   73,   73,   74,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73
    },

    {
       35,   75,   75,   76,   75,   75,   75,   75,   75,   75,
       77,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75
    },

    {
       35,   75,   75,   76,   75,   75,   75,   75,   75,   75,
       77,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75
    },

    {
       35,   78,   78,   79,   80,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   81,
       78,   78,   78,   78,   78,   78,   78,   78
    },

    {
       35,   78,   78,   79,   80,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   81,
       78,   78,   78,   78,   78,   78,   78,   78

    },

    {
       35,   82,   82,   83,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82
    },

    {
       35,   82,   82,   83,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82
    },

    {
       35,   84,   84,   85,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84
    },

    {
       35,   84,   84,   85,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84
    },

    {
       35,   86,   86,   87,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86

    },

    {
       35,   86,   86,   87,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43
    },

    {
       35,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43

    },

    {
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35
    },

    {
       35,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36
    },

    {
       35,  -37,   88,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,

      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37
    },

    {
       35,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38
    },

    {
       35,  -39,  -39,  -39,  -39,   89,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39

    },

    {
       35,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,   90,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40
    },

    {
       35,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
       91,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41
    },

    {
       35,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,

      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42
    },

    {
       35,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43
    },

    {
       35,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44

    },

    {
       35,  -45,  -45,  -45,  -45,  -45,   92,  -45,  -45,  -45,
      -45,  -45,  -45,   92,  -45,   92,   92,   92,   92,  -45,
      -45,  -45,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92
    },

    {
       35,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,   93,   93,   93,   93,   94,
      -46,  -46,  -46,  -46,  -46,   95,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46
    },

    {
       35,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,

      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47
    },

    {
       35,  -48,   96,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,   97,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48
    },

    {
       35,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49

    },

    {
       35,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50
    },

    {
       35,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51
    },

    {
       35,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,

      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52
    },

    {
       35,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53
    },

    {
       35,  -54,   98,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54

    },

    {
       35,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55
    },

    {
       35,   99,  -56,  -56,  -56,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99
    },

    {
       35,  -57,  100,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,

      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57
    },

    {
       35,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58
    },

    {
       35,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59

    },

    {
       35,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60
    },

    {
       35,  -61,  101,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61
    },

    {
       35,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,

      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62
    },

    {
       35,  -63,  -63,  -63,  -63,  102,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63
    },

    {
       35,  -64,  -64,  -64,  -64,  -64,  103,  -64,  -64,  -64,
      -64,  -64,  104,  103,  -64,  105,  106,  106,  106,  -64,
      -64,  -64,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103

    },

    {
       35,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  107,  107,  107,  107,  -65,
      -65,  -65,  -65,  107,  107,  107,  107,  107,  107,  -65,
      -65,  107,  107,  107,  107,  107,  107,  107
    },

    {
       35,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66
    },

    {
       35,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,

      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67
    },

    {
       35,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68
    },

    {
       35,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  108,  108,  108,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69

    },

    {
       35,  -70,  -70,  -70,  -70,  -70,  103,  -70,  -70,  -70,
      -70,  -70,  -70,  103,  -70,  103,  103,  103,  103,  -70,
      -70,  -70,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  109,  109,  109,  -71,  -71,
      -71,  -71,  -71,  -71,  110,  -71,  -71,  -71,  111,  -71,
      -71,  -71,  112,  -71,  -71,  -71,  -71,  113
    },

    {
       35,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  114,  114,  114,  114,  -72,

      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72
    },

    {
       35,  115,  115,  -73,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115
    },

    {
       35,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74

    },

    {
       35,  116,  116,  -75,  116,  116,  116,  116,  116,  116,
      -75,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116
    },

    {
       35,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76
    },

    {
       35,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  117,  -77,  -77,  -77,  -77,  -77,

      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77
    },

    {
       35,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78
    },

    {
       35,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79

    },

    {
       35,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80
    },

    {
       35,  -81,  -81,  -81,  118,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  119,  119,  119,  119,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  118,
      -81,  -81,  118,  118,  118,  118,  118,  120
    },

    {
       35,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,

      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82
    },

    {
       35,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83
    },

    {
       35,  121,  121,  -84,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121

    },

    {
       35,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85
    },

    {
       35,  122,  122,  -86,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122
    },

    {
       35,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,

      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87
    },

    {
       35,  -88,   88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88
    },

    {
       35,  -89,  -89,  -89,  -89,  123,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89

    },

    {
       35,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90
    },

    {
       35,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91
    },

    {
       35,  -92,  -92,  -92,  -92,  -92,   92,  -92,  -92,  -92,
      -92,  -92,  -92,   92,  -92,   92,   92,   92,   92,  -92,

      -92,  -92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92
    },

    {
       35,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,   93,   93,   93,   93,   94,
      -93,  -93,  -93,  -93,  -93,   95,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93
    },

    {
       35,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94

    },

    {
       35,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  124,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95
    },

    {
       35,  -96,   96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,   97,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96
    },

    {
       35,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,

      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97
    },

    {
       35,  -98,   98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98
    },

    {
       35,   99,  -99,  -99,  -99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99

    },

    {
       35, -100,  100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100
    },

    {
       35, -101,  101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101
    },

    {
       35, -102, -102, -102, -102,  125, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,

     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102
    },

    {
       35, -103, -103, -103, -103, -103,  103, -103, -103, -103,
     -103, -103, -103,  103, -103,  103,  103,  103,  103, -103,
     -103, -103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104,  126,  126,  126, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104

    },

    {
       35, -105, -105, -105, -105, -105,  103, -105, -105, -105,
     -105, -105, -105,  103, -105,  127,  127,  127,  103, -105,
     -105, -105,  103,  103,  128,  103,  103,  103,  129,  103,
      103,  103,  130,  103,  103,  103,  103,  131
    },

    {
       35, -106, -106, -106, -106, -106,  103, -106, -106, -106,
     -106, -106, -106,  103, -106,  132,  132,  132,  132, -106,
     -106, -106,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107,  107,  107,  107,  107, -107,

     -107, -107, -107,  107,  107,  107,  107,  107,  107, -107,
     -107,  107,  107,  107,  107,  107,  107,  107
    },

    {
       35, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108,  133,  133,  133,  133, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108
    },

    {
       35, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109,  109,  109,  109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109

    },

    {
       35, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110,  134,  134, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110
    },

    {
       35, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111,  135,  135,  135,  135, -111,
     -111, -111, -111,  135,  135,  135, -111, -111, -111, -111,
     -111,  135,  135,  135, -111, -111, -111, -111
    },

    {
       35, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112, -112,  136,  136, -112, -112, -112,

     -112, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112, -112, -112, -112, -112
    },

    {
       35, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113, -113,  137,  137,  137,  137, -113,
     -113, -113, -113,  137,  137,  137, -113, -113, -113, -113,
     -113,  137,  137,  137, -113, -113, -113, -113
    },

    {
       35, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114,  114,  114,  114,  114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114

    },

    {
       35,  115,  115, -115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115
    },

    {
       35,  116,  116, -116,  116,  116,  116,  116,  116,  116,
     -116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116
    },

    {
       35, -117, -117, -117, -117, -117, -117, -117, -117, -117,
     -117, -117, -117, -117, -117, -117, -117, -117, -117, -117,

     -117, -117, -117, -117, -117, -117, -117, -117, -117, -117,
     -117, -117, -117, -117, -117, -117, -117, -117
    },

    {
       35, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118
    },

    {
       35, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119,  138,  138,  138,  138, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119

    },

    {
       35, -120, -120, -120, -120, -120, -120, -120, -120, -120,
     -120, -120, -120, -120, -120,  139,  139,  139,  139, -120,
     -120, -120, -120,  139,  139,  139, -120, -120, -120, -120,
     -120,  139,  139,  139, -120, -120, -120, -120
    },

    {
       35,  121,  121, -121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121
    },

    {
       35,  122,  122, -122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122
    },

    {
       35, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123
    },

    {
       35, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124,  140,  141, -124, -124, -124, -124, -124

    },

    {
       35, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125, -125, -125
    },

    {
       35, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126,  142,  142,  142,  142, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126
    },

    {
       35, -127, -127, -127, -127, -127,  103, -127, -127, -127,
     -127, -127, -127,  103, -127,  127,  127,  127,  103, -127,

     -127, -127,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -128, -128, -128, -128, -128,  103, -128, -128, -128,
     -128, -128, -128,  103, -128,  143,  143,  103,  103, -128,
     -128, -128,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -129, -129, -129, -129, -129,  103, -129, -129, -129,
     -129, -129, -129,  103, -129,  144,  144,  144,  144, -129,
     -129, -129,  103,  144,  144,  144,  103,  103,  103,  103,
      103,  144,  144,  144,  103,  103,  103,  103

    },

    {
       35, -130, -130, -130, -130, -130,  103, -130, -130, -130,
     -130, -130, -130,  103, -130,  145,  145,  103,  103, -130,
     -130, -130,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -131, -131, -131, -131, -131,  103, -131, -131, -131,
     -131, -131, -131,  103, -131,  146,  146,  146,  146, -131,
     -131, -131,  103,  146,  146,  146,  103,  103,  103,  103,
      103,  146,  146,  146,  103,  103,  103,  103
    },

    {
       35, -132, -132, -132, -132, -132,  103, -132, -132, -132,
     -132, -132, -132,  103, -132,  132,  132,  132,  132, -132,

     -132, -132,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133,  133,  133,  133,  133, -133,
     -133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133, -133, -133, -133
    },

    {
       35, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134,  134,  134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134

    },

    {
       35, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135,  135,  135,  135,  135, -135,
     -135, -135, -135,  135,  135,  135, -135, -135, -135, -135,
     -135,  135,  135,  135, -135, -135, -135, -135
    },

    {
       35, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136,  136,  136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136, -136
    },

    {
       35, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137,  137,  137,  137,  137, -137,

     -137, -137, -137,  137,  137,  137, -137, -137, -137, -137,
     -137,  137,  137,  137, -137, -137, -137, -137
    },

    {
       35, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138,  118,  118,  118,  118, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138
    },

    {
       35, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139,  139,  139,  139,  139, -139,
     -139, -139, -139,  139,  139,  139, -139, -139, -139, -139,
     -139,  139,  139,  139, -139, -139, -139, -139

    },

    {
       35, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140,  147,  147,  147, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140
    },

    {
       35, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141,  148,  148,  148, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141
    },

    {
       35, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142,  142,  142,  142,  142, -142,

     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142
    },

    {
       35, -143, -143, -143, -143, -143,  103, -143, -143, -143,
     -143, -143, -143,  103, -143,  143,  143,  103,  103, -143,
     -143, -143,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -144, -144, -144, -144, -144,  103, -144, -144, -144,
     -144, -144, -144,  103, -144,  144,  144,  144,  144, -144,
     -144, -144,  103,  144,  144,  144,  103,  103,  103,  103,
      103,  144,  144,  144,  103,  103,  103,  103

    },

    {
       35, -145, -145, -145, -145, -145,  103, -145, -145, -145,
     -145, -145, -145,  103, -145,  145,  145,  103,  103, -145,
     -145, -145,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103
    },

    {
       35, -146, -146, -146, -146, -146,  103, -146, -146, -146,
     -146, -146, -146,  103, -146,  146,  146,  146,  146, -146,
     -146, -146,  103,  146,  146,  146,  103,  103,  103,  103,
      103,  146,  146,  146,  103,  103,  103,  103
    },

    {
       35, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147,  149,  149,  149,  149,  150,

     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147
    },

    {
       35, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148,  151,  151,  151,  151,  152,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148
    },

    {
       35, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149,  149,  149,  149,  149,  150,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149

    },

    {
       35, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150
    },

    {
       35, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151,  151,  151,  151,  151,  152,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151
    },

    {
       35, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,

     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152
    },

    } ;

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[153] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   41,   41,
        0,    0,    0,    0,    0,    0,    0,    0,   54,   54,
        0,    0,    0,    0,   58,    9,    5,    8,    2,    9,
        9,    7,   57,   14,   13,   14,   18,   17,   19,   15,
       16,   20,   23,   21,   22,   26,   24,   25,   27,   39,
       31,   40,   28,   33,   39,   36,   37,   38,   39,   33,
       39,   34,   41,   42,   43,   46,   44,   49,   50,   48,
       49,   52,   51,   55,   56,   54,   53,    5,    3,    6,
        1,   13,    0,   12,    0,   17,   16,   21,   26,   24,

       31,   29,   33,    0,   33,   32,   35,   34,   34,    0,
        0,    0,    0,   34,   41,   43,   45,   47,    0,    0,
       55,   54,    4,    0,   30,   32,   32,   33,   33,   33,
       33,   32,   34,   34,   34,   34,   34,    0,   47,    0,
        0,   32,   32,   32,   32,   32,    0,    0,    0,   11,
        0,   10
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    1,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   18,   18,   19,   20,    1,
       21,    1,    1,   22,   23,   24,   25,   23,   23,   23,
       26,   26,   26,   26,   26,   27,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   28,   26,   26,
        1,   29,    1,    1,   30,    1,   31,   32,   23,   23,

       23,   33,   26,   26,   26,   26,   26,   26,   26,   34,
       26,   26,   26,   35,   26,   36,   26,   26,   26,   37,
       26,   26,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[58] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 
    1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "flex/gas-i386x64.flex"
/*
    *****************************************************************************
    *                                                                           *
    *   i386x64.flex                                                             *
    *                                                                           *
    *   --------------------------------------------------------------------    *
    *                                                                           *
    *   part of GNU as lexer for Scintilla                                      *
    *                                                                           *
    *   Copyright (C) 2011-2014 Guillaume Wardavoir                             *
    *                                                                           *
    *                                                                           *
    *   --------------------------------------------------------------------    *
    *                                                                           *
    *   This program is free software; you can redistribute it and/or modify    *
    *   it under the terms of the GNU General Public License as published by    *
    *   the Free Software Foundation; either version 2 of the License, or       *
    *   (at your option) any later version.                                     *
    *                                                                           *
    *   This program is distributed in the hope that it will be useful,         *
    *   but WITHOUT ANY WARRANTY; without even the implied warranty of          *
    *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
    *   GNU General Public License for more details.                            *
    *                                                                           *
    *   You should have received a copy of the GNU General Public License       *
    *   along with this program; if not, write to the Free Software             *
    *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,   *
    *   USA.                                                                    *
    *                                                                           *
    *****************************************************************************
*/
/*
 *
 *******************************************************************************
 *
 *                              DEFINITIONS
 *
 *******************************************************************************
 *
 */
// nodefault : supress default rule, and exit(2) when unmatched input
// %option nodefault
// pointer / array
// keep yylineno valid
// use exclusive states ( why not ? )
















/*
 *
 *******************************************************************************
 *
 *                              PRECODE
 *
 *******************************************************************************
 *
 */
#line 94 "flex/gas-i386x64.flex"
//  ============================================================================
//  INCLUDES
//  ============================================================================

// For flex invocation
#include    <limits.h>
#include    <stdio.h>
#include    <stdlib.h>
#include    <string.h>
#include    <unistd.h>

#include    <string>

#include    "liblexerext-common.hh"
//  ============================================================================
//  LEX PARAMS
//  ============================================================================

//  ============================================================================
//  DEBUGGING
//  ============================================================================
#ifdef  LLG_DEBUG__FLEX_LOG
    #define FLEX_LOG( FORMAT, ... )                                             \
        {                                                                       \
            printf(FORMAT, __VA_ARGS__);                                        \
        }
#else
    #define FLEX_LOG( FORMAT, ... )
#endif
//  ............................................................................
#ifdef  LLG_DEBUG__FLEX_DBG
    #define FLEX_DBG( STATE, FORMAT, ... )                                                          \
        {                                                                                           \
            printf("[%05i][%5u] %-25s:" FORMAT, sScintillaLineno(), sMcp(), STATE, __VA_ARGS__);    \
        }
#else
    #define FLEX_DBG( STATE, FORMAT, ... )
#endif
//  ............................................................................
#ifdef  LLG_DEBUG__FLEX_RULE_MATCH
    #define FLEX_DBM( STATE, FORMAT, ... )                                                              \
        {                                                                                               \
            printf("[%05i][%5u] %-25s:Match:" FORMAT, sScintillaLineno(), sMcp(), STATE, __VA_ARGS__);  \
        }
#else
    #define FLEX_DBM( STATE, FORMAT, ... )
#endif
//  ............................................................................
#ifdef  LLG_DEBUG__FLEX_RULE_MISMATCH
    #define FLEX_DBM_ERR( STATE, FORMAT, ... )                                                                          \
        {                                                                                                               \
            printf("[%5i][%5u] %-25s:%sMatch%s:" FORMAT, sScintillaLineno(), sMcp(), STATE, LLGC9, LLGNA, __VA_ARGS__); \
        }
#else
    #define FLEX_DBM_ERR( STATE, FORMAT, ... )
#endif
//  ============================================================================
//  ENUMS
//  ============================================================================
enum
{
    eFlexState_INITIAL      =   1   ,

    eFlexState_I1           =   2   ,
    eFlexState_I2           =   3   ,
    eFlexState_I3           =   4   ,
    eFlexState_I4           =   5   ,

    eFlexState_LABEL        =   6   ,
    eFlexState_EXPRESSION   =   7   ,
    eFlexState_DIRECTIVE    =   8   ,
    eFlexState_INSTRUCTION  =   9   ,
    //  ........................................................................

    eFlexState_COMMENT_SL   =   10  ,
    eFlexState_COMMENT_ML   =   11  ,

    eFlexState_STRING       =   12  ,

    eFlexState_NEWLINE      =   29  ,
    eFlexState_NIMPL        =   30  ,
    eFlexState_Error        =   31
};
//  ============================================================================
//  GLOBAL FUNCTIONS / VARS
//  ============================================================================
        void    FlexReset(int _start_pos, int _first_line, int _first_line_flags);
//  ============================================================================
//U static  int     s_state_current                 =   eFlexState_INITIAL;

//U static  int     sStateCurrent()                 { return s_state_current;   }

void    state_begin(int _state, int _pos);
#define FLEX_BEGIN_STATE( STATE, POS )                                          \
    FLEX_FCP_PUSH( POS );                                                       \
    state_begin( eFlexState_ ## STATE, POS );

#define FLEX_BEGIN_STATE_INT( STATE, POS )                                      \
    FLEX_FCP_PUSH( POS );                                                       \
    state_begin( STATE, POS );
//  ============================================================================
static  int     s_flex_scintilla_start_pos      =   0;
static  int     s_flex_scintilla_line_start     =   0;

//  sScintillaLineno() is used only in some macros
#if     defined( LLG_DEBUG__FLEX_DBG            )   ||                          \
        defined( LLG_DEBUG__FLEX_RULE_MATCH     )   ||                          \
        defined( LLG_DEBUG__FLEX_RULE_MISMATCH  )

static  int     sScintillaLineno()
{
    return  ( yylineno + s_flex_scintilla_line_start + 1 );                     //  +1 for matching line number displayed within SCITE
}

#endif
//  ============================================================================
static  int     s_flex_start_positions          [5];
static  int     s_flex_match_positions          [5];
static  int     s_flex_start_positions_index    =   0;
static  int     s_flex_match_positions_index    =   0;
static  int     s_flex_states_positions_index   =   0;
static  int     s_flex_last_colourized_pos      =   -1;

//U static  int     sIdx();
//U static  int     sIdxFcp();
//U static  int     sIdxLcp();
static  void    sIdxRaz     ();
static  int     sFcp        (int _index);
static  int     sLcp        (int _index);
static  void    sFcpPush    (int _pos);
static  void    sLcpPush    (int _pos);
static  void    sPosDump();

static  void    sFlexAddToken( int _fcp, int _lcp, int _color)
{
    liblexerext::AddToken(_fcp, _lcp, _color);
    s_flex_last_colourized_pos  =   _lcp;
}

#define FLEX_FCP_PUSH( POS )    sFcpPush( POS );
#define FLEX_LCP_PUSH( POS )    sLcpPush( POS );

#define FLEX_POS_RAZ()          sIdxRaz();

#define FLEX_POS_RST( POS )                                                     \
    sIdxRaz();                                                                  \
    sFcpPush( POS );

#define FLEX_TOK_ADD( COLOR )               sFlexAddToken( sFcp(0)  ,   sLcp(0)  ,  COLOR );
#define FLEX_TOK_ADD_S( IX, COLOR )         sFlexAddToken( sFcp(IX) ,   sLcp(IX) ,  COLOR );
#define FLEX_TOK_ADD_F( IX1, IX2, COLOR )   sFlexAddToken( sFcp(IX1),   sFcp(IX2),  COLOR );
#define FLEX_TOK_ADD_L( IX1, IX2, COLOR )   sFlexAddToken( sLcp(IX1),   sLcp(IX2),  COLOR );
#define FLEX_TOK_ADD_D( IX1, IX2, COLOR )   sFlexAddToken( sFcp(IX1),   sLcp(IX2),  COLOR );
#define FLEX_TOK_ADD_R( IX1, IX2, COLOR )   sFlexAddToken( sFcp(IX1),   sLcp(IX2),  COLOR );
#define FLEX_TOK_ADD_A( COLOR )             sFlexAddToken( sFcp(0)  ,   sLcp( sIdxLcp() - 1 ),  COLOR );
//  ============================================================================
int     a_mcp;

int     sMcp()      {   return a_mcp;   }

#define FLEX_REWIND()                                                           \
{                                                                               \
    yyless(0);                                                                  \
    a_mcp = a_mcp - 1;      /* because of YY_USER_ACTION */                     \
}
//  ============================================================================
//  at each beginning of line ( {nl} match rule ), set the line flags with
//  these macros
#define FLEX_LFLAGS_SET_SL()                                                    \
{                                                                               \
    /* test yytext[0] for .|{nl} as well as {nl} rules */                       \
    if ( yytext[0] == '\n' )                                                    \
        liblexerext::SetLineFlags( yylineno, 0 );                               \
}
#define FLEX_LFLAGS_SET_ML(ML_STATE, ML_PREVIOUS_STATE)                         \
{                                                                               \
        liblexerext::SetLineFlags                                               \
        (                                                                       \
            yylineno                ,                                           \
            sLineFlagsFromFlexStates(                                           \
                ML_STATE            ,                                           \
                ML_PREVIOUS_STATE   )                                           \
        );                                                                      \
}

static  int     s_start_ml_state            =   0;
static  int     s_start_ml_previous_state   =   0;
//! \enum       eLineFlags
//! \brief      Used for memorizing lexing information in multiline operations
//! \details    It is an int ( only the 16 low-bits ) coding :
//!                 - the ml   state        ( 5 bits ) mask : 0b00000000 00011111  = 0x001f
//!                 - the flex state        ( 5 bits ) mask : 0b00000011 11100000  = 0x03e0
static  int     sLineFlagsToMLState(int _line_flags)
{
    return ( _line_flags & 0x0000001f );
}
static  int     sLineFlagsToMLPreviousState(int _line_flags)
{
    return ( ( _line_flags & 0x000003e0 ) >> 5 );
}
static  int     sLineFlagsFromFlexStates(int _ml_state, int _ml_previous_state)
{
    return ( _ml_state | ( _ml_previous_state << 5 ) );
}
//  ============================================================================
static  bool        s_flag_initial_local    =   false;

static  bool        sFlagILoc()     { return s_flag_initial_local;      }
static  void        sFlagILocSet()  { s_flag_initial_local  =   true;   }
static  void        sFlagILocRst()  { s_flag_initial_local  =   false;  }
//  ============================================================================
static  bool        s_flag_initial_dot      =   false;

static  bool        sFlagIDot()     { return s_flag_initial_dot;        }
static  void        sFlagIDotSet()  { s_flag_initial_dot    =   true;   }
static  void        sFlagIDotRst()  { s_flag_initial_dot    =   false;  }
//  ============================================================================
static  std::string sIWordSymbol;
//  ============================================================================
//  STATE_INITIAL ( I1 ), I2, I3, I4 variables & functions
//  ============================================================================
static  void    sBegin_state_INITIAL(int _pos);
static  void    sBegin_state_I1(int _pos);
static  void    sBegin_state_I2(int _pos);
static  void    sBegin_state_I3(int _pos);
static  void    sBegin_state_I4(int _pos);
//  ============================================================================
//  STATE_LABEL
//  ============================================================================
static  void    sBegin_state_LABEL(int _pos);
//  ============================================================================
//  STATE_EXPRESSION
//  ============================================================================
static  void    sBegin_state_EXPRESSION(int _pos);
//  ============================================================================
//  STATE_DIRECTIVE variables & functions
//  ============================================================================
static  void    sBegin_state_DIRECTIVE(int _pos);
//  ============================================================================
//  STATE_INSTRUCTION variables & functions
//  ============================================================================
static  void    sBegin_state_INSTRUCTION(int _pos);

static  void    sRT_state_INSTRUCTION_prepare();
//  ============================================================================
//  STATE_COMMENT_SL variables & functions
//  ============================================================================
static  int     s_comment_sl_rt_color;

static  void    sBegin_state_COMMENT_SL(int _pos);

static  int     sCOMMENT_SL_RT_color();
static  void    sCOMMENT_SL_RT_color_set(int _state);
//  ============================================================================
//  STATE_COMMENT_ML variables & functions
//  ============================================================================
static  int     s_comment_ml_rt_previous_state;

static  void    sBegin_state_COMMENT_ML(int _pos);

static  void    sCOMMENT_ML_RT_init(int _current_state);
static  int     sCOMMENT_ML_RT_previous_state();
static  void    sCOMMENT_ML_RT_previous_state_set(int _state);
//  ============================================================================
//  STATE_STRING variables & functions
//  ============================================================================
static  int     s_string_rt_previous_state;

static  void    sBegin_state_STRING(int _pos);

static  int     sSTRING_RT_previous_state();
static  void    sSTRING_RT_previous_state_set(int _state);
//  ============================================================================
//  STATE_NEWLINE variables & functions
//  ============================================================================
void    sBegin_state_NEWLINE(int _pos);
//  ============================================================================
//  STATE_NIMPL variables & functions
//  ============================================================================
void    sBegin_state_NIMPL(int _pos);
//  ============================================================================
//  STATE_ERROR variables & functions
//  ============================================================================
static  bool    a_st_error_token_added  =   false;

static  void    sStError_token_added_set(bool _b);
static  bool    sStError_token_added();

static  void    sBegin_st_error(int _pos);
//  ============================================================================
//  STATE_COMMENT_BLOCK variables & functions
//  ============================================================================
void    si_reset();
void    si_begin();
//  ============================================================================
//  GLOBAL defines, variables & functions
//  ============================================================================
#ifdef  LLG_DEBUG__FLEX_YY_USER_ACTION
    #define YY_USER_ACTION                                                          \
        {                                                                           \
            printf("=> [%i] + [%lu] => [%lu]\n", a_mcp, yyleng, a_mcp + yyleng );   \
            a_mcp = a_mcp + yyleng;                                                 \
        }
#else
    #define YY_USER_ACTION                                                      \
    {                                                                           \
        a_mcp = a_mcp + yyleng;                                                 \
    }
#endif
//  ............................................................................
char    flex_str_dummy[1024];


/*
============================================================================
FLEX REMARKS
============================================================================
Notes :
* Do not use name definitions ( {name} ) in character classes ( [] )
* Regexps explanations:
lstringdq       {dquote}(\\.|[^\"\n])*{dquote}
\\.     for escaped characters within a string ex. "ABCD\"EFGH"
============================================================================
FOLLOWING IS FOR GAS version 2.25
Remarks :
- Octal numbers as constants are chars from [0-7], but escaped inside a
string they are chars from [0-9]
============================================================================
Notations:
N   [0-9]
n   [1-9]
D   [n1][N+]
B   C-B
A   C-A
V   [a-z0-9]
I   [A-Za-Z0-9]
i   [A-Za-z]
S   [A-Za-z0-9_.$]
s   [A-Za-z_.$]
----------------------------------------------------------------------------
Symbols:
Non-Local
Usr                                 [wS]                            1
Local
Usr                                 [L1][wS]                        2
Labels:
Non-Local
Usr                                 [wS][:1]                        3
Local
Gas                                 [L1][D1][B1][D1][:1]            4
Gas Dollar                          [L1][D1][A1][D1][:1]            5
Gas Undocumented-A                  [L1][D1][:1]                    13
Usr Standard                        [L1][wS][:1]                    6
Usr Numeric
Usr     Declaration                 [D1][:1]                        7
Usr     Reference                   [D1][b1] / [D1][f1]             8
Directives:
Gas                                     [.1][V+]                        9
Instructions:
Inst                                    [wI]                            10
Inst   + Suffix / Prefix + Inst         [wI] [wI]                       11
Prefix + Inst + Suffix                  [wI] [wI] [wI]                  12
Comments:
* Any '#' in the line
* C-style multiline comment
* If the --divide command line option has not been specified then the [/]
character appearing anywhere on a line also introduces a line comment.
Notes:
* C-A and C-B exist for avoiding collisions between usr local symbols.
* Two ways of differentiating (1) and (9) :
- dictionnary of directives
- scan for a [:] after the word
============================================================================
SYNTHESIS
============================================================================
Statement parsing:
----------------------------------------------------------------------------
INITIAL ( I1 )
----------------------------------------------------------------------------
Get rid of [L1], and set a flag L. After that we have :
Symbols:
Non-Local
Usr                                 [wS]                            1
Local
Usr                                 [wS]                            2   L
Labels:
Non-Local
Usr                                 [wS][:1]                        3
Local
Gas                                 [D1][B1][D1][:1]                4   L
Gas Dollar                          [D1][A1][D1][:1]                5   L
Gas Undocumented-A                  [L1][D1][:1]                    13  L
Usr Standard                        [wS][:1]                        6   L
Usr Numeric
Usr     Declaration                 [D1][:1]                        7
Directives:
Gas                                     [.1][V+]                        9
Instructions:
Inst                                    [wI]                            10
Inst   + Suffix / Prefix + Inst         [wI] [wI]                       11
Prefix + Inst + Suffix                  [wI] [wI] [wI]                  12
----------------------------------------------------------------------------
I2
----------------------------------------------------------------------------
* [wI], [V] are subsets of [wS]. So it is simplier to recognize a [wS] and
work on yytext, settings dome flags :
- D ( first char is dot )
rather that defining specific flex states
* 4, 5, 7 can be resolved easyly inside I2.
After that we have :
Symbols:                                                                        Flags
Non-Local
Usr                                 [wS]                            1       (D)
Local
Usr                                 [wS]                            2   L
Labels:
Non-Local
Usr                                 [wS][:1]                        3       (D)
Local
Usr Standard                        [wS][:1]                        6   L   (D)
Directives:
Gas                                     [.1][V+]                        9       D
Instructions:
Inst                                    [wI]                            10
Inst   + Suffix / Prefix + Inst         [wI] [wI]                       11
Prefix + Inst + Suffix                  [wI] [wI] [wI]                  12
----------------------------------------------------------------------------
I3
----------------------------------------------------------------------------
Following next chars :
- If immediate next char is [:]           ->  R(3 ,6)                 with L
- If we get [ *][=] , symbol affectation  ->  R(1, 2)                 with L
- If we get [ *], goto state I4 ( so we can count the number of spaces )
After that we have :
Flags
Directives:
Gas                                     [.1][V+]                        9       D
Instructions:
Inst                                    [wI]                            10
Inst   + Suffix / Prefix + Inst         [wI] [wI]                       11
Prefix + Inst + Suffix                  [wI] [wI] [wI]                  12
----------------------------------------------------------------------------
I4
----------------------------------------------------------------------------
Easyly resloving of 9, 10, 11, 12
----------------------------------------------------------------------------
INSTRUCTION
----------------------------------------------------------------------------
Operands:
Register:       %rax
Immediate:      $0x16
movb $0x05, %al
Memory:         displacement(base register, offset register, scalar multiplier)
movl    -4(%ebp, %edx, 4), %eax  # Full example: load *(ebp - 4 + (edx * 4)) into eax
movl    -4(%ebp), %eax           # Typical example: load a stack variable into eax
movl    (%ecx), %edx             # No offset: copy the target of a pointer into a register
leal    8(,%eax,4), %eax         # Arithmetic: multiply eax by 4 and add 8
leal    (%eax,%eax,2), %eax      # Arithmetic: multiply eax by 2 and add eax (i.e. multiply by 3)
Numerical constants :
- A binary integer is `0b' or `0B' followed by zero or more of the binary digits `01'.
- An octal integer is `0' followed by zero or more of the octal digits (`01234567').
- A decimal integer starts with a non-zero digit followed by zero or more digits (`0123456789').
- A hexadecimal integer is `0x' or `0X' followed by one or more hexadecimal digits chosen from `0123456789abcdefABCDEF'.
- Integers have the usual values. To denote a negative integer, use the prefix operator `-' discussed under expressions
============================================================================
*/
//  ------------------------------------------------------------------------
//  Numerical constants
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  Others
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  Operands specific
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  Directive specific
//      - no need to escape the '"' here, but in the rule yes
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  String specific
//
//  A string is written between double-quotes. It may contain double-quotes
//  or null characters. The way to get special characters into a string is
//  to escape these characters: precede them with a backslash `\' character.
//      \b  Mnemonic for backspace; for ASCII this is octal code 010.
//      \f  Mnemonic for FormFeed; for ASCII this is octal code 014.
//      \n  Mnemonic for newline; for ASCII this is octal code 012.
//      \r  Mnemonic for carriage-Return; for ASCII this is octal code 015.
//      \t  Mnemonic for horizontal Tab; for ASCII this is octal code 011.
//      \ digit digit digit
//          An octal character code. The numeric code is 3 octal digits. For compatibility with other Unix systems, 8 and 9 are accepted as digits: for example, \008 has the value 010, and \009 the value 011.
//      \x hex-digits...
//          A hex character code. All trailing hex digits are combined.
//          Either upper or lower case x works.
//      \\  Represents one `\' character.
//      \"  Represents one `"' character. Needed in strings to represent
//          this character, because an unescaped `"' would end the string.
//      \ anything-else
//          Any other character when escaped by \ gives a warning,
//          but assembles as if the `\' was not present. The idea is that
//          if you used an escape sequence you clearly didn't want the
//          literal interpretation of the following character.
//          However as has no other interpretation, so as knows it is giving
//          you the wrong code and warns you of the fact.
//  Which characters are escapable, and what those escapes represent, varies
//  widely among assemblers. The current set is what we think the BSD 4.2
//  assembler recognizes, and is a subset of what most C compilers recognize.
//  If you are in doubt, do not use an escape sequence.
//
//  _GWR_TODO_  multiline strings allowed ???
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
//  COMMENTs specific
//  ------------------------------------------------------------------------
//  ------------------------------------------------------------------------
#line 2208 "liblexerext-flex.cc"

#define INITIAL 0
#define STATE_I1 1
#define STATE_I2 2
#define STATE_I3 3
#define STATE_I4 4
#define STATE_LABEL 5
#define STATE_EXPRESSION 6
#define STATE_DIRECTIVE 7
#define STATE_INSTRUCTION 8
#define STATE_COMMENT_SL 9
#define STATE_COMMENT_ML 10
#define STATE_STRING 11
#define STATE_NEWLINE 12
#define STATE_NIMPL 13
#define STATE_ERROR 14
#define STATE_XSTE 15
#define STATE_COMMENT_BLOCK 16

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 727 "flex/gas-i386x64.flex"

                                                                                /*
     ***************************************************************************
     *
     *                              RULES
     *
     * remember to use : styler.ColourTo(currentPos - ((currentPos > lengthDocument) ? 2 : 1), state);
     *
     *  Conventions :
     *
     *  - When a state begins, it first position has been initialized with the
     *    position of the first char that belongs to that state.
     *
     ***************************************************************************
                                                                                */
                                                                                /*
    ****************************************************************************
    STATE_INITIAL ( == STATE_I1 )

    Scan the beginning of a statement.

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */
#line 2449 "liblexerext-flex.cc"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/*
     *      comments
     */
case 1:
YY_RULE_SETUP
#line 758 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "comment ml");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT_ML );
        FLEX_POS_RAZ    ();
        sCOMMENT_ML_RT_init( eFlexState_INITIAL );
        FLEX_BEGIN_STATE( COMMENT_ML, sMcp() + 1 );
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 767 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "comment sl(#)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT1 );

        sCOMMENT_SL_RT_color_set( SCE_GAS_COMMENT1 );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( COMMENT_SL, sMcp() + 1 );
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 776 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "comment sl(##)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT2 );

        sCOMMENT_SL_RT_color_set( SCE_GAS_COMMENT2 );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( COMMENT_SL, sMcp() + 1 );
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 785 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "comment sl(###)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT3 );

        sCOMMENT_SL_RT_color_set( SCE_GAS_COMMENT3 );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( COMMENT_SL, sMcp() + 1 );
}
	YY_BREAK
/*
     *      spaces
     */
case 5:
YY_RULE_SETUP
#line 797 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "{cWsp}+");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      ".L" string
     */
case 6:
YY_RULE_SETUP
#line 806 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "{wLoc}");
        FLEX_LCP_PUSH   ( sMcp() );
        //  ( chaining positions, so no RAZ although state change )
        sFlagILocSet();                                                         //  set local flag
        FLEX_BEGIN_STATE( I2 , sMcp() + 1 );
    }
	YY_BREAK
/*
     *      xste, nexline
     */
case 7:
YY_RULE_SETUP
#line 816 "flex/gas-i386x64.flex"
{
        FLEX_DBG("INITIAL", "%s\n", "{wXste}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RST    ( sMcp() + 1 );                                         //  _GWR_TODO_ xste should reset to INITIAL
    }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 822 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( NEWLINE, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      AOC : jump to STAGE2
     */
case 9:
YY_RULE_SETUP
#line 833 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INITIAL", "%s\n", "no {wLoc}");
        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( I2, sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_I2

    - on pos stack :  0          0
                     [i]    or  [i]  [k]
                                [j]
                                [.L]
    ****************************************************************************
                                                                                */


/*
     *      [D1][B1][D1][:1]                4   L
     */
case 10:
YY_RULE_SETUP
#line 856 "flex/gas-i386x64.flex"
{   //  _GWR_TODO_ ensure .L
        FLEX_DBM("I2", "%s\n", "R4");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD_D  ( 0, 1, SCE_GAS_LABEL_GAS );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( LABEL, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      [D1][A1][D1][:1]                5   L
     */
case 11:
YY_RULE_SETUP
#line 866 "flex/gas-i386x64.flex"
{   //  _GWR_TODO_ ensure .L
        FLEX_DBM("I2", "%s\n", "R5");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD_D  ( 0, 1, SCE_GAS_LABEL_GAS );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( LABEL, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      [D1][:1]                        7
     *      [L1][D1][:1]                    13  L
     */
case 12:
YY_RULE_SETUP
#line 877 "flex/gas-i386x64.flex"
{   //  _GWR_TODO_ ensure no .L
        FLEX_DBM("I2", "%s\n", "R7, R13");
        if ( sFlagILoc() )
        {
            FLEX_DBM("I2", "%s\n", "R13");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D  ( 0, 1, SCE_GAS_LABEL_GAS );                        //  [L1][D1][:1]
            FLEX_POS_RAZ    ();
            FLEX_BEGIN_STATE( LABEL, sMcp() + 1 );
        }
        else
        {
            FLEX_DBM("I2", "%s\n", "R7");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD    ( SCE_GAS_LABEL_GAS );                              //  [D1][:1]
            FLEX_POS_RAZ    ();
            FLEX_BEGIN_STATE( LABEL, sMcp() + 1 );
        }
    }
	YY_BREAK
/*
     *      {wS} ; set D flag and go to I3
     */
case 13:
YY_RULE_SETUP
#line 899 "flex/gas-i386x64.flex"
{
        FLEX_DBM("I2", "%s\n", "{wS}");

        if ( yytext[0] == '.' )
            sFlagIDotSet();

        sIWordSymbol.assign( yytext );

        FLEX_LCP_PUSH   ( sMcp() );
        //  ( chaining positions, so no RAZ although state change )
        FLEX_BEGIN_STATE( I3, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      xste, newline, AOC : error
     */
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 914 "flex/gas-i386x64.flex"
{
        FLEX_DBM_ERR("I2", "%s\n", "JAM");
        FLEX_LFLAGS_SET_SL();

        //  if ".L" colourize it
        if ( sFlagILoc() )
            FLEX_TOK_ADD    ( SCE_GAS_ERROR_SYNTAX_UNCOLORIZED );               //  [.L]

        FLEX_REWIND         ();
        FLEX_POS_RAZ        ();
        FLEX_BEGIN_STATE( Error, sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_I3

    - on pos stack :  0              0    1    2
                     [i] [k]    or  [i]  [k]  [m]
                     [j]            [j]  [l]
                     [wS]           [.L] [wS]
    ****************************************************************************
                                                                                */


/*
     *      [wS][:1]                        3       (D)
     *      [wS][:1]                        6   L   (D)
     */
case 15:
YY_RULE_SETUP
#line 943 "flex/gas-i386x64.flex"
{
        FLEX_DBM("I3", "%s\n", "R3,R6");

        if ( sFlagILoc() )
        {
            FLEX_DBM("I3", "%s\n", "R6");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D  ( 0, 2, SCE_GAS_LABEL_GAS );                        //  [.L][wS][:1]
            FLEX_POS_RAZ    ();
            FLEX_BEGIN_STATE( LABEL, sMcp() + 1 );
        }
        else
        {
            FLEX_DBM("I3", "%s\n", "R3");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D  ( 0, 1, SCE_GAS_LABEL_USR );                        //  [wS][:1]
            FLEX_POS_RAZ    ();
            FLEX_BEGIN_STATE( LABEL, sMcp() + 1 );
        }
    }
	YY_BREAK
/*
     *      [wS]                            1       (D)
     *      [wS]                            2   L
     */
case 16:
YY_RULE_SETUP
#line 967 "flex/gas-i386x64.flex"
{   //  _GWR_REM_ never empty token, even if 0 wsp
        FLEX_DBM("I3", "%s\n", "R1, R2");

        if ( sFlagILoc() )
        {
            FLEX_DBM("I3", "%s\n", "R2");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D  ( 0, 1, SCE_GAS_LABEL_GAS );                        //  [.L][wS]
            FLEX_TOK_ADD_S  ( 2, SCE_GAS_DEFAULT );                             //  [ *][=1]
            //FLEX_BEGIN_STATE( Expression, sMcp() + 1 );
                FLEX_POS_RAZ    ();
                FLEX_BEGIN_STATE( NIMPL, sMcp() + 1 );                          //  _GWR_TODO_ Expression
        }
        else
        {
            FLEX_DBM("I3", "%s\n", "R1");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_S  ( 0, SCE_GAS_LABEL_USR );                           //  [wS]
            FLEX_TOK_ADD_S  ( 1, SCE_GAS_DEFAULT );                             //  [ *][=1]
            //FLEX_BEGIN_STATE( Expression, sMcp() + 1 );
                FLEX_POS_RAZ    ();
                FLEX_BEGIN_STATE( NIMPL, sMcp() + 1 );                          //  _GWR_TODO_ Expression
        }
    }
	YY_BREAK
/*
     *      9, 10, 11, 12 : count spaces and go to I4
     */
case 17:
YY_RULE_SETUP
#line 994 "flex/gas-i386x64.flex"
{   //  _GWR_TODO_ epurer, '.' superseeds 0 whitespace
        FLEX_DBM("I3", "%s\n", "R9, ( R10, R11, R12 )");
        //  ( chaining positions, so no RAZ although state change )
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_BEGIN_STATE( I4, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      xste, AOC : error
     */
case 18:
YY_RULE_SETUP
#line 1003 "flex/gas-i386x64.flex"
{
        FLEX_DBM_ERR("I3", "%s\n", "JAM");

        if ( sFlagILoc() )
        {
            ////FLEX_DBM("I3", "%s\n", "R6");
            ////FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D  ( 0, 1, SCE_GAS_ERROR_SYNTAX_UNCOLORIZED );         //  [.L][wS]
        }
        else
        {
            ////FLEX_DBM("I3", "%s\n", "R3");
            ////FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD    ( SCE_GAS_ERROR_SYNTAX_UNCOLORIZED );               //  [wS]
        }
        FLEX_REWIND         ();
        FLEX_POS_RAZ        ();
        FLEX_BEGIN_STATE( Error, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      {nl} : error / directive / inst
     */
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 1025 "flex/gas-i386x64.flex"
{
        FLEX_LFLAGS_SET_SL();

        if ( sFlagILoc() )
        {
            FLEX_DBM_ERR("I3", "%s\n", "[.L][wS][nl]");
            ////FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D      ( 0, 1, SCE_GAS_ERROR_SYNTAX_UNCOLORIZED );     //  [.L][wS]

            FLEX_REWIND         ();
            FLEX_POS_RAZ        ();
            FLEX_BEGIN_STATE    ( Error, sMcp() + 1 );
        }
        else
        {
            if ( sFlagIDot() )
            {
                FLEX_DBM("I3", "%s\n", "[.DIRECTIVE][nl]");
                ////FLEX_LCP_PUSH   ( sMcp() );
                FLEX_TOK_ADD        ( SCE_GAS_DIRECTIVE );                      //  [wS]    D

                FLEX_REWIND         ();
                FLEX_POS_RAZ        ();
                FLEX_BEGIN_STATE    ( NEWLINE, sMcp() + 1 );
            }
            else
            {
                FLEX_DBM_ERR("I3", "%s\n", "[wS][nl]");

                FLEX_REWIND         ();
                ////FLEX_BEGIN_STATE    ( INSTRUCTION, sMcp() + 1 );

                FLEX_TOK_ADD        ( SCE_GAS_INSTRUCTION_GENERIC );            //  [wS]    //  _GWR_TODO_  colourize in STATE_INSTTRUCTION

                FLEX_POS_RAZ        ();
                FLEX_BEGIN_STATE    ( NEWLINE, sMcp() + 1 );

            }
        }
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_I4

    - on pos stack :  0                  0    1    2    3
                     [i] [k]  [m]   or  [i]  [k]  [m]  [p]
                     [j] [l]            [j]  [l]  [n]
                     [wS][ +]           [.L] [wS] [ +]
    ****************************************************************************
                                                                                */


/*
     *      [.1][V+]                        9       D
     *      [wI]                            10
     *      [wI] [wI]                       11
     *      [wI] [wI] [wI]                  12
     *
     *      Act accordingly to the first non-wsp char ( wsp chars have been
     *      handled by STATE_I3 )
     */
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1087 "flex/gas-i386x64.flex"
{
        FLEX_DBM("I4", "%s\n", "R9, ( R10, R11, R12 )");
        FLEX_LFLAGS_SET_SL();

        if ( sFlagILoc() )
        {
            FLEX_DBM_ERR("I4", "%s\n", "R9 ERROR");
            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD_D  ( 0, 2, SCE_GAS_ERROR_SYNTAX_UNCOLORIZED );         //  [.L][wS][ +]

            FLEX_REWIND         ();
            FLEX_POS_RAZ        ();
            FLEX_BEGIN_STATE( Error, sMcp() + 1 );
        }
        else
        {
            if ( sFlagIDot() )
            {
                FLEX_DBM("I4", "%s\n", "R9 (ok)");
                FLEX_TOK_ADD_S  ( 0, SCE_GAS_DIRECTIVE );                       //  [wS]
                FLEX_TOK_ADD_S  ( 1, SCE_GAS_DEFAULT );                         //  [ +]

                FLEX_REWIND();
                FLEX_POS_RAZ    ();
                FLEX_BEGIN_STATE( DIRECTIVE, sMcp() + 1 );
            }
            else
            {
                FLEX_DBM("I4", "%s\n", "R10, R11, R12 (ok)");

                FLEX_TOK_ADD_S  ( 0, SCE_GAS_INSTRUCTION_GENERIC );             //  [wS]
                FLEX_TOK_ADD_S  ( 1, SCE_GAS_DEFAULT );                         //  [ +]

                FLEX_REWIND();
                FLEX_POS_RAZ    ();
                FLEX_BEGIN_STATE( INSTRUCTION, sMcp() + 1 );                    //  _GWR_TODO_  colourize in STATE_INSTRUCTION
            }
        }
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_LABEL

    Nothing is allowed after the [:] ( except spaces )

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


case 21:
YY_RULE_SETUP
#line 1167 "flex/gas-i386x64.flex"
{
        FLEX_DBM("LABEL", "%s\n", "{cWsp}+");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      xste, nexline
     */
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 1176 "flex/gas-i386x64.flex"
{
        FLEX_DBM("LABEL", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( NEWLINE, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      any other char / string : error
     */
case 23:
YY_RULE_SETUP
#line 1187 "flex/gas-i386x64.flex"
{
        FLEX_DBM_ERR("LABEL", "JAM [%02x] -> ERROR\n", yytext[0]);
        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( Error, sMcp() + 1 );                                  //  _GWR_TODO_ Memorization vs RAZ
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_DIRECTIVE

    Nothing is allowed after the [:] ( except spaces )

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


case 24:
YY_RULE_SETUP
#line 1209 "flex/gas-i386x64.flex"
{
        FLEX_DBM("DIRECTIVE", "%s\n", "{cWsp}+");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      xste
     *
    {wXste}                                                                         {
        FLEX_DBG("DIRECTIVE", "%s\n", "{wXste}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RST    ( sMcp() + 1 );                                         //  _GWR_TODO_ xste should reset to INITIAL
    }
    */
/*
     *      newline
     */
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 1228 "flex/gas-i386x64.flex"
{
        FLEX_DBM("DIRECTIVE", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( NEWLINE, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      token
     */
case 26:
YY_RULE_SETUP
#line 1239 "flex/gas-i386x64.flex"
{
        FLEX_DBM("DIRECTIVE", "%s\n", "{wDIRTok}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DIRECTIVE_TOKEN );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      string start
     */
case 27:
YY_RULE_SETUP
#line 1248 "flex/gas-i386x64.flex"
{
        FLEX_DBM_ERR("DIRECTIVE", "%s\n", """");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_STRING );
        FLEX_POS_RAZ    ();
        sSTRING_RT_previous_state_set( eFlexState_DIRECTIVE );
        FLEX_BEGIN_STATE( STRING, sMcp() + 1);
    }
	YY_BREAK
/*
     *      AOC ( no free char so not matching rule for instant )
     */
/*.                                                                               {
        FLEX_DBM_ERR("DIRECTIVE", "[%02x]", yytext[0]);
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DIRECTIVE_TOKEN );
        FLEX_POS_RST    ( sMcp() + 1 );
    }*/

/*
    ****************************************************************************
    STATE_INSTRUCTION

    Scan the beginning of a statement.

    - on pos stack :  0   1   2
                     [i] [k] [m]    or      [i] [k]
                     [j] [l]                [j]      ( + nl immedately after )
                     [wS][ +]               [wS]

    - on pos stack :  0
                     [i]

    - wS is stored in sIWordSymbol
    ****************************************************************************
                                                                                */


/*
     *      comment sl
     */
case 28:
YY_RULE_SETUP
#line 1288 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "comment sl(#)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT1 );

        sCOMMENT_SL_RT_color_set( SCE_GAS_COMMENT1 );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( COMMENT_SL, sMcp() + 1 );
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1297 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "comment sl(#)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT2 );

        sCOMMENT_SL_RT_color_set( SCE_GAS_COMMENT2 );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( COMMENT_SL, sMcp() + 1 );
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1306 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "comment sl(#)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT3 );

        sCOMMENT_SL_RT_color_set( SCE_GAS_COMMENT3 );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( COMMENT_SL, sMcp() + 1 );
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1316 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{cWsp}+");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1323 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{wOPImm}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_OPERAND_IMMEDIATE );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1330 "flex/gas-i386x64.flex"
{
        int n   =   SCE_GAS_OPERAND_SYMBOL;

        FLEX_DBM("INSTRUCTION", "%s\n", "{wInst}");
        FLEX_LCP_PUSH   ( sMcp() );

        //FLEX_TOK_ADD    ( SCE_GAS_INSTRUCTION_GENERIC );
        if ( liblexerext::IsInstruction( yytext, &n ) )
        {
            FLEX_DBG( "INSTRUCTION", "INST => [%s][%i]\n", yytext, n);
            FLEX_TOK_ADD    ( n );
        }
        else
        {
            FLEX_DBG( "INSTRUCTION", "SYM => [%s]\n", yytext);
            FLEX_TOK_ADD    ( n );
        }

        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1351 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{wOPNcst}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_OPERAND_SCALAR );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1358 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s %s\n", "{wOPReg}", yytext);
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_OPERAND_REGISTER );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1365 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{cLp}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_REVERSE );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1372 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{cRp}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_REVERSE );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1379 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{cComma}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_REVERSE );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1386 "flex/gas-i386x64.flex"
{
        FLEX_DBM_ERR("INSTRUCTION", "[%02x]\n", yytext[0]);
        //FLEX_LCP_PUSH   ( sMcp() );
        //FLEX_TOK_ADD    ( SCE_GAS_ERROR_SYNTAX_UNCOLORIZED );

        FLEX_REWIND         ();
        FLEX_POS_RAZ        ();
        FLEX_BEGIN_STATE( Error, sMcp() + 1 );
    }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 1396 "flex/gas-i386x64.flex"
{
        FLEX_DBM("INSTRUCTION", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( NEWLINE, sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_COMMENT_SL

    When entering this state, we point on the first char after the #-s

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


/*
     *      AOC
     */
case 41:
YY_RULE_SETUP
#line 1422 "flex/gas-i386x64.flex"
{
        FLEX_DBM("COMMENT_SL", "%s\n", "(text...)");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( sCOMMENT_SL_RT_color() );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      newline : exit state
     */
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 1431 "flex/gas-i386x64.flex"
{
        FLEX_DBM("COMMENT_SL", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( INITIAL, sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_COMMENT_ML

    When entering this state, we point on the first char after the '/''*'

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


/*
     *      AOC except '*'
     */
case 43:
YY_RULE_SETUP
#line 1456 "flex/gas-i386x64.flex"
{
        FLEX_DBM("COMMENT_ML", "[%s][%s]\n","{cCMTMLbx}+", yytext);

        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT_ML );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      '*'( will be superseeded by following rule )
     */
case 44:
YY_RULE_SETUP
#line 1466 "flex/gas-i386x64.flex"
{
        FLEX_DBM("COMMENT_ML", "[%s]\n", "isolated '*'");

        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT_ML );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      end string
     */
case 45:
YY_RULE_SETUP
#line 1476 "flex/gas-i386x64.flex"
{
        FLEX_DBM("COMMENT_ML", "[%s]\n", "*/");

        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT_ML );
        FLEX_POS_RAZ    ()
        FLEX_BEGIN_STATE( INITIAL, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      nl ( warning, flex has inc-ed yylineno ! )
     */
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1487 "flex/gas-i386x64.flex"
{
        FLEX_DBM("COMMENT_ML", "%s\n", "{nl}");

        FLEX_LOG("ML NL:lineno[%05i]\n", yylineno);
        FLEX_LFLAGS_SET_ML(
                    eFlexState_COMMENT_ML           ,
                    sCOMMENT_ML_RT_previous_state() );

        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT_ML );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      exit state
     */
/*{wCMTMLb}                                                                       {
        FLEX_DBM("COMMENT_ML", "%s\n", "");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_COMMENT_ML );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( INITIAL, sMcp() + 1 );
    }*/

/*
    ****************************************************************************
    STATE_STRING

    When entering this state, a '"' has been encountered

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


/*
     *      Escape sequences
     *
     */
case 47:
YY_RULE_SETUP
#line 1527 "flex/gas-i386x64.flex"
{
        FLEX_DBM("STRING", "%s\n", "{wSTREsc}");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_STRING_ESCAPE_SEQUENCE );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      Isolated '\' : allow multiline strings ???                          //  _GWR_TODO_ multiline strings ?
     */
/*
\\                                                                              {
    }
    */
/*
     *      Isolated '"' : string end
     */
case 48:
YY_RULE_SETUP
#line 1543 "flex/gas-i386x64.flex"
{
        FLEX_DBM("STRING", "%s\n", """");
        FLEX_LCP_PUSH       ( sMcp() );
        FLEX_TOK_ADD        ( SCE_GAS_STRING );
        FLEX_POS_RAZ        ();
        FLEX_BEGIN_STATE_INT( sSTRING_RT_previous_state(), sMcp() + 1 );
    }
	YY_BREAK
/*
     *      no xste inside string
     *
     */
/*
     *      AOC ( no free char so not matching rule for instant )
     */
case 49:
YY_RULE_SETUP
#line 1557 "flex/gas-i386x64.flex"
{
        FLEX_DBM_ERR("STRING", "[%02x]\n", yytext[0]);
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_STRING );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *      newline : error                                                     //  _GWR_TODO_ multiline strings ?
     */
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1566 "flex/gas-i386x64.flex"
{
        FLEX_DBM("STRING", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( Error, sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_NEWLINE

    When entering this state, we point on the first newline encountered

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


/*
     *      newline
     */
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1591 "flex/gas-i386x64.flex"
{
        FLEX_DBM("NEWLINE", "%s\n", "{nl}+");
        FLEX_LFLAGS_SET_SL();

        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_DEFAULT );
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( INITIAL, sMcp() + 1 );
    }
	YY_BREAK
/*
     *      any other : finish state
     */
case 52:
YY_RULE_SETUP
#line 1603 "flex/gas-i386x64.flex"
{
        FLEX_DBM("NEWLINE", "%s\n", ".");
        FLEX_REWIND     ();
        FLEX_POS_RAZ    ()
        FLEX_BEGIN_STATE( INITIAL, sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_ERROR

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */


/*
     *      xste, newline : no xste here, just newline ( avoid strings problem )
     */
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1624 "flex/gas-i386x64.flex"
{
        FLEX_LFLAGS_SET_SL();

        if ( sStError_token_added() )
        {
            FLEX_DBM("ERROR", "%s\n", "{nl} - ok");

            FLEX_REWIND     ();
            FLEX_POS_RAZ    ();
            FLEX_BEGIN_STATE( NEWLINE, sMcp() + 1 );
        }
        /*  char that caused error is '\n'                                      */
        else
        {
            FLEX_DBM("ERROR", "%s\n", "{nl} ( but no token added ! )");

            FLEX_LCP_PUSH   ( sMcp() );
            FLEX_TOK_ADD    ( SCE_GAS_ERROR_SYNTAX );
            FLEX_POS_RAZ    ();
            FLEX_BEGIN_STATE( INITIAL, sMcp() + 1 );
        }
    }
	YY_BREAK
/*
     *      any other -> colorize as error
     */
case 54:
YY_RULE_SETUP
#line 1649 "flex/gas-i386x64.flex"
{
        FLEX_DBM("ERROR", "[%i:%s]\n", (int)yyleng, yytext);
        sStError_token_added_set(true);
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_ERROR_SYNTAX );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK

/*
    ****************************************************************************
    STATE_NIMPL

    - on pos stack :  0
                     [i]
                     [ ]
    ****************************************************************************
                                                                                */
/*
     *  anything except newline
     */


/*
     *  anything except newline
     */
case 55:
YY_RULE_SETUP
#line 1675 "flex/gas-i386x64.flex"
{
        FLEX_DBM("NIMPL", "%s\n", "---");
        FLEX_LCP_PUSH   ( sMcp() );
        FLEX_TOK_ADD    ( SCE_GAS_STATE_NIMPL );
        FLEX_POS_RST    ( sMcp() + 1 );
    }
	YY_BREAK
/*
     *  newline
     */
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1685 "flex/gas-i386x64.flex"
{
        FLEX_DBM("NIMPL", "%s\n", "{nl}");
        FLEX_LFLAGS_SET_SL();

        FLEX_REWIND     ();
        FLEX_POS_RAZ    ();
        FLEX_BEGIN_STATE( INITIAL, sMcp()  + 1);
    }
	YY_BREAK

/*
    ****************************************************************************
    <<EOF>>

    - <<EOF>> is handled identically everywhere

    - Strangely the general <<EOF>> rule has to be put after specialized <<EOF>>
    rules, else flex complains about <<EOF>> multiple rules.

    - Each lex ends here ( due to scintilla lex concept ) ; we have to
      BEGIN( INITIAL ) in case of buggy lexer which dont colorize the
      entire document : in this case scintilla re-lex, but the state would not
      be reinitialized !
    ****************************************************************************
                                                                                */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STATE_I1):
case YY_STATE_EOF(STATE_I2):
case YY_STATE_EOF(STATE_I3):
case YY_STATE_EOF(STATE_I4):
case YY_STATE_EOF(STATE_LABEL):
case YY_STATE_EOF(STATE_EXPRESSION):
case YY_STATE_EOF(STATE_DIRECTIVE):
case YY_STATE_EOF(STATE_INSTRUCTION):
case YY_STATE_EOF(STATE_COMMENT_SL):
case YY_STATE_EOF(STATE_COMMENT_ML):
case YY_STATE_EOF(STATE_STRING):
case YY_STATE_EOF(STATE_NEWLINE):
case YY_STATE_EOF(STATE_NIMPL):
case YY_STATE_EOF(STATE_ERROR):
case YY_STATE_EOF(STATE_XSTE):
case YY_STATE_EOF(STATE_COMMENT_BLOCK):
#line 1709 "flex/gas-i386x64.flex"
{
        int pos_lcc =   -1;
        int pos_eof =   -1;
        //  ....................................................................
        YY_USER_ACTION;                                                         //  at <<EOF>>, YY_USER_ACTION is not called

        pos_lcc =   s_flex_last_colourized_pos;
        pos_eof =   sMcp();

        FLEX_DBG("EOF", "%s\n", "<EOF>");

        FLEX_DBG("EOF", "last colourized pos[%i] sMcp()[%i]\n", pos_lcc, pos_eof);

        //  some chars are not colourized
        if ( ( pos_lcc + 1 ) != pos_eof )
        {
            //  no char at all was colorourized
            if ( pos_lcc == -1 )
            {
                pos_lcc =   s_flex_scintilla_start_pos - 1;                     //  -1 for +1 below
            }
            FLEX_POS_RAZ    ();
            FLEX_FCP_PUSH   ( pos_lcc + 1 );
            FLEX_LCP_PUSH   ( pos_eof - 1 );
            FLEX_TOK_ADD    ( SCE_GAS_ERROR_SYNTAX );
        }

        BEGIN( INITIAL );
        return 0;
    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1740 "flex/gas-i386x64.flex"
ECHO;
	YY_BREAK
#line 3705 "liblexerext-flex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1739 "flex/gas-i386x64.flex"


/*
 *
 *******************************************************************************
 *
 *                              POSTCODE
 *
 *******************************************************************************
 *
 */

//  ============================================================================
//  GLOBAL FUNCTIONS
//  ============================================================================
void    FlexReset(int _start_pos, int _first_line, int _first_line_flags)
{
    yylineno                        =   0;
    s_flex_scintilla_start_pos      =   _start_pos;
    a_mcp                           =   _start_pos - 1;                         //  flex & scite char offsets differs from 1
    s_flex_last_colourized_pos      =   -1;                                     //  no token yet, set -1 as an 'invalid pos' marker
    s_flex_scintilla_line_start     =   _first_line;

    s_start_ml_state                =   sLineFlagsToMLState(_first_line_flags);
    s_start_ml_previous_state       =   sLineFlagsToMLPreviousState(_first_line_flags);

    FLEX_POS_RST( sMcp() + 1 );

    FLEX_LOG("Flex_reset():ml state[%03i] - previous [%03i]\n"  ,
        s_start_ml_state            ,
        s_start_ml_previous_state   );

    if ( s_start_ml_state == eFlexState_COMMENT_ML )
    {
        sCOMMENT_ML_RT_previous_state_set( s_start_ml_previous_state );
        sBegin_state_COMMENT_ML( 0 );
    }
}
//  ============================================================================
void    state_begin(int _state, int _pos)
{
    #ifdef  LLG_DEBUG__FLEX_ANNOUNCE_STATE_CHANGE
    printf("--------------------------------------------------------------------\n");
    printf("Beginning state [%i] @ [%5i][%5i]\n", _state, yylineno, _pos);
    #endif
    sPosDump();

    switch ( _state )
    {

    case    eFlexState_INITIAL          :   sBegin_state_INITIAL    ( _pos );   break;
    case    eFlexState_I1               :   sBegin_state_I1         ( _pos );   break;
    case    eFlexState_I2               :   sBegin_state_I2         ( _pos );   break;
    case    eFlexState_I3               :   sBegin_state_I3         ( _pos );   break;
    case    eFlexState_I4               :   sBegin_state_I4         ( _pos );   break;

    case    eFlexState_LABEL            :   sBegin_state_LABEL      ( _pos );   break;
    case    eFlexState_EXPRESSION       :   sBegin_state_EXPRESSION ( _pos );   break;
    case    eFlexState_DIRECTIVE        :   sBegin_state_DIRECTIVE  ( _pos );   break;
    case    eFlexState_INSTRUCTION      :   sBegin_state_INSTRUCTION( _pos );   break;

    case    eFlexState_COMMENT_SL       :   sBegin_state_COMMENT_SL ( _pos );   break;
    case    eFlexState_COMMENT_ML       :   sBegin_state_COMMENT_ML ( _pos );   break;

    case    eFlexState_STRING           :   sBegin_state_STRING     ( _pos );   break;

    case    eFlexState_NEWLINE          :   sBegin_state_NEWLINE    ( _pos );   break;

    case    eFlexState_NIMPL            :   sBegin_state_NIMPL      ( _pos );   break;

    case    eFlexState_Error            :   sBegin_st_error( _pos );    break;


    default:
    break;

    }

    //U s_state_current =   _state;
}
//  ============================================================================
//U int             sIdx()                      {   return s_flex_states_positions_index;   }
//U int             sIdxFcp()                   {   return s_flex_start_positions_index;    }
//U int             sIdxLcp()                   {   return s_flex_match_positions_index;    }

static  void    sIdxRaz()
{
    s_flex_start_positions_index    =   0;
    s_flex_match_positions_index    =   0;
    s_flex_states_positions_index   =   0;
}

static  int     sFcp        (int _index)    {   return  s_flex_start_positions[_index]; }
static  int     sLcp        (int _index)    {   return  s_flex_match_positions[_index]; }

static  void    sFcpPush    (int _pos)
{
    s_flex_start_positions[ s_flex_start_positions_index ++    ]   =   _pos;
}
static  void    sLcpPush    (int _pos)
{
    s_flex_match_positions[ s_flex_match_positions_index ++    ]   =   _pos;
    s_flex_states_positions_index++;
}
static  void    sPosDump()
{
    #ifdef  LLG_DEBUG__FLEX__DUMP_POSITIONS_AT_STATE_CHANGE
        printf("Dumping positions:");
        for ( int i = 0 ; i != s_flex_start_positions_index ; i++ )
            {   printf("[%03i]", sFcp(i));  }
        printf("\n");
        printf("                  ");
        for ( int i = 0 ; i != s_flex_match_positions_index ; i++ )
            {   printf("[%03i]", sLcp(i));  }
        printf("\n");
    #endif
}
//  ============================================================================
//  STATE_INITIAL variables & functions
//  ============================================================================
void    sBegin_state_INITIAL(int _pos)
{
    sFlagILocRst();
    sFlagIDotRst();
    BEGIN( INITIAL );
}
//  ============================================================================
//  STATE_I1
//  ============================================================================
void    sBegin_state_I1(int _pos)
{
    sBegin_state_INITIAL(_pos);
}
//  ============================================================================
//  STATE_I2
//  ============================================================================
void    sBegin_state_I2(int _pos)
{
    BEGIN( STATE_I2 );
}
//  ============================================================================
//  STATE_I3
//  ============================================================================
void    sBegin_state_I3(int _pos)
{
    BEGIN( STATE_I3 );
}
//  ============================================================================
//  STATE_I4
//  ============================================================================
void    sBegin_state_I4(int _pos)
{
    BEGIN( STATE_I4 );
}
//  ============================================================================
//  STATE_LABEL
//  ============================================================================
void    sBegin_state_LABEL(int _pos)
{
    BEGIN( STATE_LABEL );
}
//  ============================================================================
//  STATE_EXPRESSION
//  ============================================================================
void    sBegin_state_EXPRESSION(int _pos)
{
    BEGIN( STATE_EXPRESSION );
}
//  ============================================================================
//  STATE_DIRECTIVE
//  ============================================================================
void    sBegin_state_DIRECTIVE(int _pos)
{
    BEGIN( STATE_DIRECTIVE );
}
//  ============================================================================
//  STATE_INSTRUCTION
//  ============================================================================
void    sBegin_state_INSTRUCTION(int _pos)
{
    sRT_state_INSTRUCTION_prepare();

    BEGIN( STATE_INSTRUCTION );
}

void    sRT_state_INSTRUCTION_prepare()
{
}
//  ============================================================================
//  STATE_COMMENT_SL variables & functions
//  ============================================================================
static  void    sBegin_state_COMMENT_SL(int _pos)
{
    BEGIN( STATE_COMMENT_SL );
}

int     sCOMMENT_SL_RT_color()                  { return s_comment_sl_rt_color;     }
void    sCOMMENT_SL_RT_color_set(int _color)    { s_comment_sl_rt_color = _color;   }
//  ============================================================================
//  STATE_COMMENT_ML variables & functions
//  ============================================================================
void    sBegin_state_COMMENT_ML(int _pos)
{
    BEGIN( STATE_COMMENT_ML );
}

void    sCOMMENT_ML_RT_init(int _current_state)
{
    sCOMMENT_ML_RT_previous_state_set( _current_state );
    //liblexergas::SetLineFlags(yylineno, 0x1234);
}

int     sCOMMENT_ML_RT_previous_state()
{
    return s_comment_ml_rt_previous_state;
}
void    sCOMMENT_ML_RT_previous_state_set(int _state)
{
    s_comment_ml_rt_previous_state  = _state;
}
//  ============================================================================
//  STATE_STRING variables & functions
//  ============================================================================
void    sBegin_state_STRING(int _pos)
{
    BEGIN( STATE_STRING );
}

int     sSTRING_RT_previous_state()
{
    return s_string_rt_previous_state;
}
void    sSTRING_RT_previous_state_set(int _state)
{
    s_string_rt_previous_state  = _state;
}
//  ============================================================================
//  STATE_NEWLINE variables & functions
//  ============================================================================
void    sBegin_state_NEWLINE(int _pos)
{
    BEGIN( STATE_NEWLINE );
}
//  ============================================================================
//  STATE_NIMPL variables & functions
//  ============================================================================
void    sBegin_state_NIMPL(int _pos)
{
    BEGIN( STATE_NIMPL );
}
//  ============================================================================
//  STATE_ERROR variables & functions
//  ============================================================================
void    sStError_token_added_set(bool _b)
{
    a_st_error_token_added    =   _b;
}
bool    sStError_token_added()
{
    return a_st_error_token_added;
}

void    sBegin_st_error(int _pos)
{
    sStError_token_added_set(false);
    BEGIN( STATE_ERROR );
}
//  ============================================================================
//  STATE_COMMENT_BLOCK variables & functions
//  ============================================================================
void    scb_reset()
{
    //scb_color   = SCE_GAS_SYNTAX_UNKNOWN;
    //scb_type    =   0;
}
void    scb_begin(int _scb_type)
{
    //printf("> LGF():%4i +++ ( STATE_COMMENT_BLOCK [%i] ) +++\n", LexerGas::FlexCharPos(yytext), _scb_type);

    scb_reset();
    //scb_type    =   _scb_type;
    //if ( _scb_type == eLexGasFlexScb1 )
    {
        //scb_color   = SCE_GAS_COMMENT1;
    }
    //if ( _scb_type == eLexGasFlexScb2 )
    {
        //scb_color   = SCE_GAS_COMMENT2;
    }
    //if ( _scb_type == eLexGasFlexScb3 )
    {
        //scb_color   = SCE_GAS_COMMENT3;
    }

    BEGIN(STATE_COMMENT_BLOCK);
}


